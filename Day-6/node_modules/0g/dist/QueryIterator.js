export class QueryIterator {
    constructor(query, game) {
        this.query = query;
        this.game = game;
        this.archetypeIndex = 0;
        this.archetypeIterator = null;
        this.result = {
            done: true,
            value: null,
        };
        this.changedFilters = query.filter.filter((f) => f.kind === 'changed');
    }
    checkChangeFilter() {
        if (this.changedFilters.length === 0)
            return true;
        return this.changedFilters.some((filter) => {
            this.game.componentManager.wasChangedLastFrame(this.result.value.get(filter.Component).id);
        });
    }
    next() {
        while (this.archetypeIndex < this.query.archetypes.length) {
            if (!this.archetypeIterator) {
                this.archetypeIterator =
                    this.query.archetypes[this.archetypeIndex][Symbol.iterator]();
            }
            this.result = this.archetypeIterator.next();
            // if changed() filter(s) are present, ensure a change has
            // occurred in the specified components
            if (!this.result.done && !this.checkChangeFilter()) {
                continue;
            }
            // result is assigned from the current archetype iterator result -
            // if the archetype is done, we move on to the next archetype until
            // we run out
            if (this.result.done) {
                this.archetypeIndex++;
                this.archetypeIterator = null;
                continue;
            }
            return this.result;
        }
        this.result.done = true;
        this.archetypeIndex = 0;
        return this.result;
    }
    first() {
        this.archetypeIndex = 0;
        this.archetypeIterator = null;
        const first = this.next();
        // reset stateful bits
        this.archetypeIndex = 0;
        this.archetypeIterator = null;
        if (first.done) {
            return null;
        }
        return first.value;
    }
}
//# sourceMappingURL=QueryIterator.js.map