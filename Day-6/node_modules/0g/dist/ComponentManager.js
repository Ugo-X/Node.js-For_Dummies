import { ComponentPool } from './ComponentPool.js';
import { COMPONENT_CHANGE_HANDLE, componentTypeMap, } from './Component2.js';
import { IdManager } from './IdManager.js';
/**
 * Manages pools of Components based on their Type, and
 * the presence of Components assigned to Entities.
 */
export class ComponentManager {
    constructor(game) {
        this.game = game;
        this.pools = new Array();
        this.changed = new Array();
        this.unsubscribes = new Array();
        this.componentIds = new IdManager();
        this.acquire = (typeId, initialValues) => {
            if (!this.pools[typeId]) {
                throw new Error(`ComponentType with ID ${typeId} does not exist`);
            }
            const component = this.pools[typeId].acquire(initialValues, this.componentIds.get());
            component.$[COMPONENT_CHANGE_HANDLE] = this.onComponentChanged;
            return component;
        };
        this.release = (instance) => {
            delete instance.$[COMPONENT_CHANGE_HANDLE];
            this.componentIds.release(instance.$.id);
            return this.pools[instance.$.type.id].release(instance);
        };
        this.wasChangedLastFrame = (componentInstanceId) => {
            return !!this.changed[componentInstanceId];
        };
        this.onComponentChanged = (component) => {
            this.game.enqueueStepOperation({
                op: 'markChanged',
                componentId: component.$.id,
            });
        };
        this.markChanged = (componentId) => {
            this.changed[componentId] = true;
        };
        this.resetChanged = () => {
            this.changed.length = 0;
        };
        this.getTypeName = (typeId) => {
            return this.pools[typeId].ComponentType.name;
        };
        this.destroy = () => {
            this.unsubscribes.forEach((unsub) => unsub());
            this.pools.forEach((pool) => pool.destroy());
        };
        // pre-allocate pools for each ComponentType
        for (const [id, val] of componentTypeMap) {
            this.pools[id] = new ComponentPool(val, this.game);
        }
        // TODO: right time to do this?
        this.unsubscribes.push(game.subscribe('preApplyOperations', this.resetChanged));
    }
    get count() {
        return componentTypeMap.size;
    }
}
//# sourceMappingURL=ComponentManager.js.map