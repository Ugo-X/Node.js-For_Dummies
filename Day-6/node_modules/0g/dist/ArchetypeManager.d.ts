import { EventSubscriber } from '@a-type/utils';
import { Archetype } from './Archetype.js';
import { ComponentInstance, ComponentInstanceInternal } from './Component2.js';
import { Game } from './Game.js';
export type ArchetypeManagerEvents = {
    archetypeCreated(archetype: Archetype): void;
    entityCreated(entityId: number): void;
    entityComponentAdded(entityId: number, component: ComponentInstance<any>): void;
    entityComponentRemoved(entityId: number, componentType: number): void;
    entityDestroyed(entityId: number): void;
};
export declare class ArchetypeManager extends EventSubscriber<ArchetypeManagerEvents> {
    private game;
    emptyId: string;
    entityLookup: (string | undefined)[];
    archetypes: Record<string, Archetype>;
    constructor(game: Game);
    private lookupEntityArchetype;
    private setEntityArchetype;
    private clearEntityArchetype;
    createEntity(entityId: number): void;
    addComponent(entityId: number, instance: ComponentInstanceInternal): void;
    removeComponent(entityId: number, componentType: number): ComponentInstanceInternal | undefined;
    removeEntity(entityId: number): import("./Entity.js").Entity<import("./Component2.js").ComponentHandle>;
    getEntity(entityId: number): import("./Entity.js").Entity<import("./Component2.js").ComponentHandle> | null;
    private getOrCreate;
    private flipBit;
}
