import { ComponentHandle } from './Component2.js';
export type Has<Comp extends ComponentHandle> = {
    Component: Comp;
    kind: 'has';
    __isFilter: true;
    toString(): string;
};
export declare const has: <Comp extends ComponentHandle>(Component: Comp) => Has<Comp>;
export type Not<Comp extends ComponentHandle> = {
    Component: Comp;
    kind: 'not';
    __isFilter: true;
    toString(): string;
};
export declare const not: <Comp extends ComponentHandle>(Component: Comp) => Not<Comp>;
export type Changed<Comp extends ComponentHandle> = {
    Component: Comp;
    kind: 'changed';
    __isFilter: true;
    toString(): string;
};
export declare const changed: <Comp extends ComponentHandle>(Component: Comp) => Changed<Comp>;
export type OneOf<Comps extends ComponentHandle[]> = {
    Components: Comps;
    kind: 'oneOf';
    __isFilter: true;
    toString(): string;
};
export declare const oneOf: <Comps extends ComponentHandle[]>(...Components: Comps) => OneOf<Comps>;
/** @deprecated - use oneOf */
export declare const any: <Comps extends ComponentHandle[]>(...Components: Comps) => OneOf<Comps>;
export type Filter<Comp extends ComponentHandle> = Not<Comp> | Has<Comp> | Changed<Comp> | OneOf<Comp[]>;
export declare const isFilter: (thing: any) => thing is Filter<any>;
export declare const isNotFilter: (fil: Filter<any>) => fil is Not<ComponentHandle>;
export declare const isHasFilter: (fil: Filter<any>) => fil is Has<ComponentHandle>;
export declare const isChangedFilter: (fil: Filter<any>) => fil is Changed<ComponentHandle>;
export declare const isOneOfFilter: (fil: Filter<any>) => fil is OneOf<ComponentHandle[]>;
