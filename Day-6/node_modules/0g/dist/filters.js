export const has = (Component) => ({
    Component,
    kind: 'has',
    __isFilter: true,
    toString() {
        return `has(${Component.name})`;
    },
});
export const not = (Component) => ({
    Component,
    kind: 'not',
    __isFilter: true,
    toString() {
        return `not(${Component.name})`;
    },
});
export const changed = (Component) => ({
    Component,
    kind: 'changed',
    __isFilter: true,
    toString() {
        return `changed(${Component.name})`;
    },
});
export const oneOf = (...Components) => ({
    Components,
    kind: 'oneOf',
    __isFilter: true,
    toString() {
        return `oneOf(${Components.map((Comp) => Comp.name)
            .sort()
            .join(', ')})`;
    },
});
/** @deprecated - use oneOf */
export const any = oneOf;
export const isFilter = (thing) => thing.__isFilter === true;
export const isNotFilter = (fil) => fil.kind === 'not';
export const isHasFilter = (fil) => fil.kind === 'has';
export const isChangedFilter = (fil) => fil.kind === 'changed';
export const isOneOfFilter = (fil) => fil.kind === 'oneOf';
//# sourceMappingURL=filters.js.map