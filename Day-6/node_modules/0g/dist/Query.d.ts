import { Game } from './Game.js';
import { Archetype } from './Archetype.js';
import { Filter } from './filters.js';
import { EntityImpostorFor, QueryIterator } from './QueryIterator.js';
import { EventSubscriber } from '@a-type/utils';
import { ComponentHandle } from './Component2.js';
export type QueryComponentFilter = Array<Filter<ComponentHandle> | ComponentHandle>;
export type QueryEvents = {
    entityAdded(entityId: number): void;
    entityRemoved(entityId: number): void;
    destroy(): void;
};
type ExtractQueryDef<Q extends Query<any>> = Q extends Query<infer Def> ? Def : never;
export type QueryIteratorFn<Q extends Query<any>, Returns = void> = {
    (ent: EntityImpostorFor<ExtractQueryDef<Q>>): Returns;
};
export declare class Query<FilterDef extends QueryComponentFilter> extends EventSubscriber<QueryEvents> {
    private game;
    filter: Filter<ComponentHandle>[];
    readonly archetypes: Archetype<ComponentHandle[]>[];
    private trackedEntities;
    private addedThisFrame;
    private removedThisFrame;
    private changesThisFrame;
    private addedIterable;
    private unsubscribes;
    private unsubscribeArchetypes;
    private _generation;
    get generation(): number;
    constructor(game: Game);
    private processDef;
    initialize(def: FilterDef): void;
    private matchArchetype;
    reset: () => void;
    iterator: QueryIterator<FilterDef>;
    [Symbol.iterator](): QueryIterator<FilterDef>;
    first: () => EntityImpostorFor<FilterDef> | null;
    private handleEntityAdded;
    private handleEntityRemoved;
    toString(): string;
    get archetypeIds(): string[];
    get entities(): readonly number[];
    get addedIds(): readonly number[];
    get added(): {
        [Symbol.iterator]: () => AddedIterator<FilterDef>;
    };
    get removedIds(): readonly number[];
    get count(): number;
    private addToList;
    private removeFromList;
    private resetStepTracking;
    private processAddRemove;
    private emitAdded;
    private emitRemoved;
    destroy: () => void;
}
declare class AddedIterator<Def extends QueryComponentFilter> implements Iterator<EntityImpostorFor<Def>> {
    private game;
    private query;
    private index;
    private result;
    constructor(game: Game, query: Query<any>);
    next(): IteratorResult<EntityImpostorFor<Def>, any>;
}
export {};
