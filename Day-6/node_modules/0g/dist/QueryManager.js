import { isFilter } from './filters.js';
import { Query } from './Query.js';
export class QueryManager {
    constructor(game) {
        this.game = game;
        this.queryCache = new Map();
        this.handleQueryCreated = (query) => {
            const unsub = query.subscribe('destroy', () => {
                this.release(query);
                unsub();
            });
        };
    }
    getQueryKey(def) {
        return def
            .map((filter) => isFilter(filter) ? filter.toString() : `has(${filter.name})`)
            .join(',');
    }
    create(userDef) {
        const key = this.getQueryKey(userDef);
        if (this.queryCache.has(key)) {
            return this.queryCache.get(key);
        }
        const query = new Query(this.game);
        query.reset();
        query.initialize(userDef);
        this.queryCache.set(key, query);
        this.handleQueryCreated(query);
        return query;
    }
    release(query) {
        this.queryCache.delete(this.getQueryKey(query.filter));
    }
}
//# sourceMappingURL=QueryManager.js.map