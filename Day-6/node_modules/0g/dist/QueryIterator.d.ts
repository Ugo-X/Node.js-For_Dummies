import { ComponentHandle } from './Component2.js';
import { Entity } from './Entity.js';
import { OneOf, Filter, Not } from './filters.js';
import { Game } from './Game.js';
import { Query, QueryComponentFilter } from './Query.js';
type FilterNots<CompUnion extends Filter<ComponentHandle> | ComponentHandle> = CompUnion extends Not<any> ? never : CompUnion;
type UnwrapAnys<CompUnion extends Filter<ComponentHandle> | ComponentHandle> = CompUnion extends OneOf<any> ? never : CompUnion;
type UnwrapFilters<CompUnion extends Filter<ComponentHandle> | ComponentHandle> = CompUnion extends Filter<infer C> ? C : CompUnion;
type DefiniteComponentsFromFilter<Fil extends QueryComponentFilter> = UnwrapFilters<UnwrapAnys<FilterNots<Fil[number]>>>;
export type EntityImpostorFor<Q extends QueryComponentFilter> = Entity<DefiniteComponentsFromFilter<Q>>;
export declare class QueryIterator<Def extends QueryComponentFilter> implements Iterator<EntityImpostorFor<Def>> {
    private query;
    private game;
    private archetypeIndex;
    private archetypeIterator;
    private result;
    private changedFilters;
    constructor(query: Query<Def>, game: Game);
    private checkChangeFilter;
    next(): IteratorResult<EntityImpostorFor<Def>, any>;
    first(): EntityImpostorFor<Def> | null;
}
export {};
