import { allSystems } from './System.js';
export function effect(filter, effect) {
    function eff(game) {
        const query = game.queryManager.create(filter);
        const abortControllers = new Array();
        const cleanups = new Array();
        async function onEntityAdded(entityId) {
            const entity = game.get(entityId);
            if (!entity) {
                throw new Error(`Effect triggered for entity ${entityId}, but it was not found`);
            }
            const abortController = new AbortController();
            abortControllers[entityId] = abortController;
            const result = effect(entity, game, {
                abortSignal: abortController.signal,
            });
            if (result instanceof Promise) {
                cleanups[entityId] = () => {
                    result.then((clean) => {
                        clean === null || clean === void 0 ? void 0 : clean();
                    });
                };
            }
            else if (result) {
                cleanups[entityId] = result;
            }
        }
        async function onEntityRemoved(entityId) {
            var _a, _b;
            (_a = abortControllers[entityId]) === null || _a === void 0 ? void 0 : _a.abort();
            (_b = cleanups[entityId]) === null || _b === void 0 ? void 0 : _b.call(cleanups);
        }
        const unsubscribes = [
            query.subscribe('entityAdded', onEntityAdded),
            query.subscribe('entityRemoved', onEntityRemoved),
        ];
        return () => {
            for (const unsubscribe of unsubscribes) {
                unsubscribe();
            }
            for (const cleanup of cleanups) {
                cleanup();
            }
        };
    }
    allSystems.push(eff);
    return eff;
}
/** @deprecated - use effect */
export const makeEffect = effect;
//# sourceMappingURL=Effect.js.map