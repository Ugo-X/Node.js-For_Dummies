import { Game } from './Game.js';
import { QueryComponentFilter } from './Query.js';
import { EntityImpostorFor } from './QueryIterator.js';
export declare const allSystems: ((game: Game) => void | (() => void))[];
export type SystemRunner<Filter extends QueryComponentFilter, Result> = (entity: EntityImpostorFor<Filter>, game: Game, previousResult: Result) => Result;
declare function unregisteredSystem<Filter extends QueryComponentFilter, Result = void>(filter: Filter, run: SystemRunner<Filter, Result>, { phase, initialResult, }?: {
    phase?: 'step' | 'preStep' | 'postStep' | (string & {});
    initialResult?: Result;
}): (game: Game) => () => void;
export declare function system<Filter extends QueryComponentFilter, Result = void>(filter: Filter, run: SystemRunner<Filter, Result>, options?: {
    phase?: 'step' | 'preStep' | 'postStep' | (string & {});
    initialResult?: Result;
}): (game: Game) => () => void;
export declare namespace system {
    var unregistered: typeof unregisteredSystem;
}
/** @deprecated - use system */
export declare const makeSystem: typeof system;
export {};
