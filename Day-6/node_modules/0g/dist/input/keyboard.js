export class Keyboard {
    set blockBrowserShortcuts(value) {
        this._blockBrowserShortcuts = value;
    }
    constructor() {
        this.keysPressed = new Set();
        this.keysDown = new Set();
        this.keysUp = new Set();
        this._blockBrowserShortcuts = false;
        this.handleKeyDown = (ev) => {
            if (ev.target === document.body &&
                (this._blockBrowserShortcuts ||
                    // allow F12
                    (ev.key !== 'F12' &&
                        // allow refresh shortcuts
                        ev.key !== 'F5' &&
                        !(ev.key === 'r' && (ev.ctrlKey || ev.metaKey))))) {
                ev.preventDefault();
            }
            const key = ev.key;
            // avoid key-repeat triggering?
            if (!this.keysPressed.has(key)) {
                this.keysPressed.add(key);
                this.keysDown.add(key);
            }
        };
        this.handleKeyUp = (ev) => {
            const key = ev.key;
            this.keysPressed.delete(ev.key);
            this.keysUp.add(key);
        };
        this.getKeyPressed = (key) => {
            return this.keysPressed.has(key);
        };
        this.getKeyDown = (key) => {
            return this.keysDown.has(key);
        };
        this.getKeyUp = (key) => {
            return this.keysUp.has(key);
        };
        this.getAllPressedKeys = () => {
            return this.keysPressed;
        };
        this.frame = () => {
            this.keysDown.clear();
            this.keysUp.clear();
        };
        window.addEventListener('keydown', this.handleKeyDown);
        window.addEventListener('keyup', this.handleKeyUp);
    }
}
export const keyboard = new Keyboard();
//# sourceMappingURL=keyboard.js.map