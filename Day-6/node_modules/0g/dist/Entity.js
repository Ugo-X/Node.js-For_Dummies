export class Entity {
    constructor() {
        this._id = 0;
        // TODO: make array
        this.components = new Map();
        this._destroyed = true;
        this._removed = false;
        // TODO: hide these behind Symbols?
        this.__set = (entityId, components) => {
            this._id = entityId;
            this.components.clear();
            components.forEach((comp) => {
                this.components.set(comp.$.type.id, comp);
            });
            this._destroyed = false;
            this._removed = false;
        };
        this.__addComponent = (instance) => {
            this.components.set(instance.$.type.id, instance);
        };
        this.__removeComponent = (typeId) => {
            const instance = this.components.get(typeId);
            this.components.delete(typeId);
            return instance;
        };
        this.__markRemoved = () => {
            this._removed = true;
        };
        this.get = (handle) => {
            var _a;
            const instance = ((_a = this.components.get(handle.id)) !== null && _a !== void 0 ? _a : null);
            console.assert(!instance || instance.id !== 0, `Entity tried to access recycled Component instance of type ${handle.name}`);
            return instance;
        };
        this.maybeGet = (handle) => {
            var _a;
            return ((_a = this.components.get(handle.id)) !== null && _a !== void 0 ? _a : null);
        };
        this.has = (handle) => {
            return this.components.has(handle.id);
        };
    }
    get id() {
        return this._id;
    }
    get destroyed() {
        return this._destroyed;
    }
    get removed() {
        return this._removed;
    }
    reset() {
        this.components.clear();
        // disabled to diagnose issues...
        this._id = 0;
        this._destroyed = true;
    }
    clone(other) {
        other.components.forEach((value, key) => {
            this.components.set(key, value);
        });
        this._id = other.id;
    }
}
//# sourceMappingURL=Entity.js.map