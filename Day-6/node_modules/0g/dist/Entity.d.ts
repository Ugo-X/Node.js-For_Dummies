import { ComponentHandle, ComponentInstance, ComponentInstanceInternal, InstanceFor } from './Component2.js';
type DefinedInstance<Present extends ComponentHandle, Handle extends ComponentHandle> = Handle extends Present ? InstanceFor<Handle> : InstanceFor<Handle> | null;
export declare class Entity<DefiniteComponents extends ComponentHandle = ComponentHandle> {
    private _id;
    readonly components: Map<number, ComponentInstance>;
    private _destroyed;
    private _removed;
    get id(): number;
    get destroyed(): boolean;
    get removed(): boolean;
    __set: (entityId: number, components: ComponentInstanceInternal[] | Readonly<ComponentInstanceInternal[]>) => void;
    __addComponent: (instance: ComponentInstanceInternal) => void;
    __removeComponent: (typeId: number) => ComponentInstanceInternal;
    __markRemoved: () => void;
    get: <T extends ComponentHandle>(handle: T) => DefinedInstance<DefiniteComponents, T>;
    maybeGet: <T extends ComponentHandle>(handle: T) => InstanceFor<T> | null;
    has: <T extends ComponentHandle>(handle: T) => boolean;
    reset(): void;
    clone(other: Entity<any>): void;
}
export {};
