export type AssetLoader<T = any> = (key: string) => Promise<T>;
export type AssetLoaderImpls<Assets extends Record<string, any>> = {
    [key in keyof Assets]: AssetLoader<Assets[key]>;
};
export declare class Assets<Loaders extends Record<string, any>> {
    private _loaders;
    private handlePool;
    private handles;
    constructor(_loaders: AssetLoaderImpls<Loaders>);
    load: <LoaderName extends (string & {}) | keyof Loaders>(loader: LoaderName, key: string) => Promise<Loaders[LoaderName]>;
    immediate: <LoaderName extends (string & {}) | keyof Loaders>(loader: LoaderName, key: string) => Loaders[LoaderName] | null;
    private getKey;
}
